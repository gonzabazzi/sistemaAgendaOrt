/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package vista;

import Observer.Observable;
import Observer.Observer;
import java.util.ArrayList;
import modelo.Conexion;
import modelo.Fachada;
import modelo.UsuarioAdministrador;

/**
 *
 * @author PC
 */
public class MonitorConexiones extends javax.swing.JFrame implements Observer {

    /**
     * Creates new form MonitorConexiones
     */
    public MonitorConexiones(UsuarioAdministrador ua) {
        initComponents();
        setTitle("MONITOR CONEXIONES - " + ua.getNombreCompleto().toUpperCase() );
        setLocationRelativeTo(null);
        Fachada.getInstancia().subscribir(this);
        mostrarConexiones();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        listaConexiones = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setViewportView(listaConexiones);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(71, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        Fachada.getInstancia().desubscribir(this);
    }//GEN-LAST:event_formWindowClosing

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList listaConexiones;
    // End of variables declaration//GEN-END:variables

    private void mostrarConexiones() {
        ArrayList<Conexion> conexiones = Fachada.getInstancia().getConexiones();
        ArrayList<String> listado = new ArrayList();
        for(Conexion c:conexiones){
            listado.add(formatear(c));
        }
        listaConexiones.setListData(listado.toArray());
    }

    private String formatear(Conexion c) {
        return c.getUsuario().getNombreCompleto() + " (" + 
               c.getUsuario().getAgenda().cantidadContactos() + ")  - " +
               c.getFecha();
    }

    @Override
    public void notificar(Observable origen, Object evento) {
        if(((Observable.Evento) evento).equals(Observable.Evento.CONEXION_ACTUALIZADA)){
            mostrarConexiones();
        }
    }
}
